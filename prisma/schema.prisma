// prisma/schema.prisma - Updated for Escrow Payment System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// === USER MANAGEMENT ===

model User {
  id                            Int                   @id @default(autoincrement())
  email                         String                @unique
  firstName                     String
  lastName                      String
  password                      String?
  provider                      String                @default("manual")
  providerId                    String?
  phone                         String?
  phoneCountryCode              String?
  profileImage                  String?
  // Granular address fields for KYC
  district                      String?  // required for KYC
  sector                        String?  // required for KYC
  street                        String?  // required for KYC
  province                      String?  // required for KYC
  state                         String?  // required for KYC
  country                       String?  // required for KYC
  // Legacy postal code fields (still available for other use cases)
  city                          String?
  zipCode                       String?
  postalCode                    String?
  postcode                      String?
  pinCode                       String?
  eircode                       String?
  cep                           String?
  status                        String                @default("pending")
  userType                      String                @default("guest")
  bio                           String?
  experience                    Int?
  languages                     Json?
  specializations               Json?
  rating                        Float                 @default(0)
  totalTours                    Int                   @default(0)
  isVerified                    Boolean               @default(false)
  licenseNumber                 String?
  certifications                Json?
  totalSessions                 Int                   @default(0)
  twoFactorEnabled              Boolean               @default(false)
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
  lastLogin                     DateTime?
  resetPasswordOtp              String?
  resetPasswordExpires          DateTime?
  verificationStatus            String?               @default("unverified")
  preferredCommunication        String?               @default("email")
  hostNotes                     String?
  averageRating                 Float                 @default(0)
  county                        String?
  region                        String?
  companyName                   String?
  companyTIN                    String?
  employmentContract            String?
  nationalId                    String?
  tourGuideType                 String?
  verificationDocument          String?
  kycCompleted                  Boolean   @default(false)
  kycSubmittedAt                DateTime?
  kycStatus                     String    @default("pending") // pending, approved, rejected
  addressDocument               String?   // URL to address verification document

  // Referral system fields
  referredBy                    Int?                  // ID of the user who referred this user
  referralCode                  String?               // Referral code generated for this user
  referralStatus                String                @default("Pending") // Pending, Active, Inactive
  referredAt                    DateTime?             // When this user was referred

  agentBookings                 AgentBooking[]        @relation("AgentBookings")
  clientBookings                AgentBooking[]        @relation("ClientBookings")
  bankAccounts                  BankAccount[]
  bookingsAsGuest               Booking[]             @relation("GuestBookings")
  escrowNotifications           EscrowNotification[]
  escrowTransactionsAsRecipient EscrowTransaction[]   @relation("RecipientEscrowTransactions")
  escrowTransactions            EscrowTransaction[]   @relation("UserEscrowTransactions")
  hostEarnings                  HostEarning[]         @relation("HostEarnings")
  mobileMoneyAccounts           MobileMoneyAccount[]
  paymentSettings               PaymentSettings?
  paymentTransactions           PaymentTransaction[]
  hostPayouts                   Payout[]              @relation("HostPayouts")
  properties                    Property[]
  reviews                       Review[]
  tourBookingsAsGuest           TourBooking[]         @relation("GuestTourBookings")
  tourEarnings                  TourEarnings[]
  receivedTourMessages          TourMessage[]         @relation("TourMessageReceiver")
  sentTourMessages              TourMessage[]         @relation("TourMessageSender")
  tourNotifications             TourNotification[]
  tourReviews                   TourReview[]
  toursAsGuide                  Tour[]                @relation("TourGuideToTours")
  sessions                      UserSession[]
  wallet                        Wallet?
  wishlists                     Wishlist[]
  withdrawal_requests           WithdrawalRequest[]
  userSettings                  UserSettings?
  userVerifications             UserVerification[]
  connectedAccounts             ConnectedAccount[]

  // Referral relationships
  referrer                      User?                 @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals                     User[]                @relation("UserReferrals")

  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       Int
  sessionToken String   @unique
  refreshToken String   @unique
  device       String?
  browser      String?
  location     String?
  ipAddress    String?
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_sessions")
}

model WithdrawalRequest {
  id String @id @default(cuid())

  // User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Withdrawal Details
  amount   Float
  currency String @default("RWF")
  method   String // MOBILE, BANK
  status   String @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED

  // Destination (stored as JSON for flexibility)
  destination Json // { holderName, accountNumber, mobileProvider?, bankCode?, etc. }

  // Processing
  pesapalPayoutId String? // Pesapal payout request ID
  reference       String  @unique
  failureReason   String?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  @@index([userId])
  @@index([status])
  @@index([reference])
  @@index([createdAt])
  @@map("withdrawal_requests")
}

model EscrowNotification {
  id String @id @default(cuid())

  // User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Related Transaction (optional)
  escrowTransactionId String?
  escrowTransaction   EscrowTransaction? @relation(fields: [escrowTransactionId], references: [id], onDelete: SetNull)

  // Notification Details
  type    String // escrow_created, escrow_funded, release_requested, etc.
  title   String
  message String
  data    Json? // Additional notification data

  // Delivery Channels
  channels Json // ["email", "sms", "push", "in_app"]

  // Status
  isRead Boolean   @default(false)
  readAt DateTime?
  sentAt DateTime?

  // Delivery Status
  emailSent Boolean @default(false)
  smsSent   Boolean @default(false)
  pushSent  Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([escrowTransactionId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("escrow_notifications")
}

model Property {
  id                Int           @id @default(autoincrement())
  name              String
  location          String
  type              String
  category          String
  description       String?
  pricePerNight     Float
  pricePerTwoNights Float?
  beds              Int
  baths             Int
  maxGuests         Int
  features          Json
  images            Json
  video3D           String?
  hostId            Int
  ownerDetails      Json?
  availableFrom     DateTime?
  availableTo       DateTime?
  minStay           Int           @default(1)
  maxStay           Int?
  status            String        @default("pending")
  isVerified        Boolean       @default(false)
  isInstantBook     Boolean       @default(false)
  views             Int           @default(0)
  totalBookings     Int           @default(0)
  averageRating     Float         @default(0)
  reviewsCount      Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  propertyAddress   String?
  upiNumber         String?
  blockedDates      BlockedDate[]
  bookings          Booking[]
  hostEarnings      HostEarning[] @relation("PropertyEarnings")
  pricingRules      PricingRule[]
  host              User          @relation(fields: [hostId], references: [id], onDelete: Cascade)
  reviews           Review[]
  wishlistedBy      Wishlist[]

  @@index([hostId])
  @@index([status])
  @@map("properties")
}

model Booking {
  id                   String       @id @default(cuid())
  propertyId           Int
  guestId              Int
  checkIn              DateTime
  checkOut             DateTime
  guests               Int
  totalPrice           Float
  message              String?
  hostResponse         String?
  status               String       @default("pending")
  paymentStatus        String       @default("pending")
  paymentMethod        String?
  transactionId        String?
  notes                String?
  specialRequests      String?
  checkInInstructions  String?
  checkOutInstructions String?
  guestNotes           String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  cancellationReason   String?
  cancelledAt          DateTime?
  guest                User         @relation("GuestBookings", fields: [guestId], references: [id], onDelete: Cascade)
  property             Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  hostEarning          HostEarning? @relation("BookingEarning")
  reviews              Review[]

  @@index([propertyId])
  @@index([guestId])
  @@index([status])
  @@map("bookings")
}

model Review {
  id           String    @id @default(cuid())
  propertyId   Int
  userId       Int
  bookingId    String?
  rating       Int
  comment      String
  images       Json?
  response     String?
  responseDate DateTime?
  isVisible    Boolean   @default(true)
  isReported   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  booking      Booking?  @relation(fields: [bookingId], references: [id])
  property     Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, userId])
  @@index([propertyId])
  @@index([userId])
  @@index([rating])
  @@map("reviews")
}

model BlockedDate {
  id         String   @id @default(cuid())
  propertyId Int
  startDate  DateTime
  endDate    DateTime
  reason     String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([startDate, endDate])
  @@map("blocked_dates")
}

model PricingRule {
  id            String   @id @default(cuid())
  propertyId    Int
  name          String
  type          String
  startDate     DateTime
  endDate       DateTime
  priceModifier Float
  modifierType  String
  minStay       Int?
  maxStay       Int?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([startDate, endDate])
  @@map("pricing_rules")
}

model Wishlist {
  id         String   @id @default(cuid())
  userId     Int
  propertyId Int
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([userId])
  @@map("wishlists")
}

model Tour {
  id               String         @id @default(cuid())
  title            String
  description      String
  shortDescription String
  tourGuideId      Int
  category         String
  type             String
  duration         Float
  maxGroupSize     Int
  minGroupSize     Int            @default(1)
  price            Float
  currency         String         @default("USD")
  images           Json
  itinerary        Json
  inclusions       Json
  exclusions       Json
  requirements     Json
  difficulty       String
  locationCountry  String
  locationState    String?
  locationCity     String
  locationAddress  String
  latitude         Float?
  longitude        Float?
  locationZipCode  String?
  meetingPoint     String
  isActive         Boolean        @default(true)
  rating           Float          @default(0)
  totalReviews     Int            @default(0)
  totalBookings    Int            @default(0)
  views            Int            @default(0)
  tags             Json
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  bookings         TourBooking[]
  earnings         TourEarnings[]
  messages         TourMessage[]
  reviews          TourReview[]
  schedules        TourSchedule[]
  tourGuide        User           @relation("TourGuideToTours", fields: [tourGuideId], references: [id], onDelete: Cascade)

  @@index([tourGuideId])
  @@index([category])
  @@index([isActive])
  @@map("tours")
}

model TourCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  icon        String? // Icon class or URL
  color       String? // Hex color for UI
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([sortOrder])
  @@map("tour_categories")
}

model TourSchedule {
  id             String        @id @default(cuid())
  tourId         String
  tourGuideId    Int
  startDate      DateTime
  endDate        DateTime
  startTime      String
  endTime        String
  availableSlots Int
  bookedSlots    Int           @default(0)
  isAvailable    Boolean       @default(true)
  price          Float?
  specialNotes   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  bookings       TourBooking[]
  tour           Tour          @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@index([tourId])
  @@index([tourGuideId])
  @@index([startDate, endDate])
  @@map("tour_schedules")
}

model TourBooking {
  id                   String         @id @default(cuid())
  userId               Int
  tourId               String
  scheduleId           String
  tourGuideId          Int
  numberOfParticipants Int
  participants         Json
  specialRequests      String?
  totalAmount          Float
  currency             String         @default("USD")
  status               String         @default("pending")
  paymentStatus        String         @default("pending")
  paymentId            String?
  checkInStatus        String         @default("not_checked_in")
  checkInTime          DateTime?
  checkOutTime         DateTime?
  refundAmount         Float?
  refundReason         String?
  guestNotes           String?
  bookingDate          DateTime       @default(now())
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  schedule             TourSchedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  tour                 Tour           @relation(fields: [tourId], references: [id], onDelete: Cascade)
  user                 User           @relation("GuestTourBookings", fields: [userId], references: [id], onDelete: Cascade)
  earnings             TourEarnings[]
  messages             TourMessage[]
  reviews              TourReview[]

  @@index([userId])
  @@index([tourId])
  @@index([scheduleId])
  @@index([tourGuideId])
  @@index([status])
  @@map("tour_bookings")
}

model TourReview {
  id             String      @id @default(cuid())
  bookingId      String
  userId         Int
  tourId         String
  tourGuideId    Int
  rating         Int
  comment        String
  images         Json?
  pros           Json
  cons           Json
  wouldRecommend Boolean
  isAnonymous    Boolean     @default(false)
  isVerified     Boolean     @default(true)
  isVisible      Boolean     @default(true)
  isReported     Boolean     @default(false)
  helpfulCount   Int         @default(0)
  reportCount    Int         @default(0)
  response       String?
  responseDate   DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  booking        TourBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  tour           Tour        @relation(fields: [tourId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bookingId, userId])
  @@index([userId])
  @@index([tourId])
  @@index([tourGuideId])
  @@index([rating])
  @@map("tour_reviews")
}

model TourMessage {
  id          String       @id @default(cuid())
  senderId    Int
  receiverId  Int
  bookingId   String?
  tourId      String?
  subject     String?
  message     String
  attachments Json?
  messageType String
  isRead      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  booking     TourBooking? @relation(fields: [bookingId], references: [id])
  receiver    User         @relation("TourMessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User         @relation("TourMessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  tour        Tour?        @relation(fields: [tourId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([bookingId])
  @@index([tourId])
  @@map("tour_messages")
}

model TourNotification {
  id        String   @id @default(cuid())
  userId    Int
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@map("tour_notifications")
}

model TourEarnings {
  id            String      @id @default(cuid())
  tourGuideId   Int
  bookingId     String
  tourId        String
  amount        Float
  commission    Float
  netAmount     Float
  currency      String      @default("USD")
  status        String      @default("pending")
  payoutDate    DateTime?
  payoutMethod  String?
  transactionId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  booking       TourBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  tourGuide     User        @relation(fields: [tourGuideId], references: [id], onDelete: Cascade)
  tour          Tour        @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@index([tourGuideId])
  @@index([bookingId])
  @@index([tourId])
  @@index([status])
  @@map("tour_earnings")
}


model Wallet {
  id            String              @id @default(cuid())
  userId        Int                 @unique
  balance       Float               @default(0)
  currency      String              @default("RWF")
  accountNumber String?
  isActive      Boolean             @default(true)
  isVerified    Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  transactions  WalletTransaction[]
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("wallets")
}

model PaymentTransaction {
  id                  String    @id @default(cuid())
  userId              Int
  type                String
  method              String
  amount              Float
  currency            String    @default("KES")
  status              String    @default("pending")
  reference           String    @unique
  externalId          String?
  jengaTransactionId  String?
  description         String?
  metadata            Json?
  charges             Float?
  netAmount           Float?
  sourceAccount       String?
  destinationAccount  String?
  phoneNumber         String?
  bankCode            String?
  accountName         String?
  failureReason       String?
  callbackUrl         String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  completedAt         DateTime?
  escrowStatus        String?
  escrowTransactionId String?
  isEscrowBased       Boolean   @default(false)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([method])
  @@index([reference])
  @@index([createdAt])
  @@map("payment_transactions")
}

model WalletTransaction {
  id            String   @id @default(cuid())
  walletId      String
  type          String
  amount        Float
  balanceBefore Float
  balanceAfter  Float
  reference     String
  description   String
  transactionId String?
  createdAt     DateTime @default(now())
  wallet        Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([reference])
  @@index([createdAt])
  @@map("wallet_transactions")
}

model BankAccount {
  id            String   @id @default(cuid())
  userId        Int
  accountNumber String
  accountName   String
  bankCode      String
  bankName      String
  branchCode    String?
  isDefault     Boolean  @default(false)
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountNumber, bankCode])
  @@index([userId])
  @@map("bank_accounts")
}

model MobileMoneyAccount {
  id          String   @id @default(cuid())
  userId      Int
  phoneNumber String
  provider    String
  accountName String
  isDefault   Boolean  @default(false)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, phoneNumber])
  @@index([userId])
  @@map("mobile_money_accounts")
}

model EscrowTransaction {
  id                 String               @id @default(cuid())
  userId             Int
  recipientId        Int?
  type               String
  amount             Float
  currency           String               @default("RWF")
  status             String               @default("PENDING")
  reference          String               @unique
  description        String?
  escrowId           String?
  externalId         String?
  paymentUrl         String?
  sourceEscrowId     String?
  transferType       String?
  isP2P              Boolean              @default(false)
  notifyBySMS        Boolean              @default(false)
  fundedAt           DateTime?
  releasedAt         DateTime?
  releasedBy         Int?
  releaseReason      String?
  disputedAt         DateTime?
  disputedBy         Int?
  disputeReason      String?
  resolvedAt         DateTime?
  resolvedBy         Int?
  resolutionReason   String?
  cancelledAt        DateTime?
  cancellationReason String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  metadata           Json?
  refundedAt         DateTime?
  notifications      EscrowNotification[]
  recipient          User?                @relation("RecipientEscrowTransactions", fields: [recipientId], references: [id])
  user               User                 @relation("UserEscrowTransactions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recipientId])
  @@index([status])
  @@index([type])
  @@index([currency])
  @@index([escrowId])
  @@index([createdAt])
  @@index([reference])
  @@map("escrow_transactions")
}


model PaymentSettings {
  id                      String   @id @default(cuid())
  userId                  Int      @unique
  defaultCurrency         String   @default("KES")
  autoWithdrawal          Boolean  @default(false)
  withdrawalThreshold     Float?
  defaultBankAccount      String?
  defaultMobileNumber     String?
  notificationPreferences Json
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("payment_settings")
}

model Payout {
  id            String        @id @default(cuid())
  hostId        Int
  amount        Float
  currency      String        @default("USD")
  status        String        @default("pending")
  method        String
  periodStart   DateTime
  periodEnd     DateTime
  fees          Float         @default(0)
  netAmount     Float
  reference     String        @unique
  externalId    String?
  failureReason String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  processedAt   DateTime?
  earnings      HostEarning[] @relation("PayoutEarnings")
  host          User          @relation("HostPayouts", fields: [hostId], references: [id], onDelete: Cascade)

  @@index([hostId])
  @@index([status])
  @@map("payouts")
}

model HostEarning {
  id          String    @id @default(cuid())
  hostId      Int
  bookingId   String    @unique
  propertyId  Int
  grossAmount Float
  platformFee Float
  hostEarning Float
  currency    String    @default("USD")
  payoutId    String?
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  earnedAt    DateTime?
  booking     Booking   @relation("BookingEarning", fields: [bookingId], references: [id], onDelete: Cascade)
  host        User      @relation("HostEarnings", fields: [hostId], references: [id], onDelete: Cascade)
  payout      Payout?   @relation("PayoutEarnings", fields: [payoutId], references: [id])
  property    Property  @relation("PropertyEarnings", fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([hostId])
  @@index([bookingId])
  @@index([propertyId])
  @@index([status])
  @@map("host_earnings")
}

model AgentBooking {
  id             String   @id @default(cuid())
  agentId        Int
  clientId       Int
  bookingType    String
  bookingId      String
  commission     Float
  commissionRate Float
  status         String   @default("active")
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  agent          User     @relation("AgentBookings", fields: [agentId], references: [id], onDelete: Cascade)
  client         User     @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([clientId])
  @@map("agent_bookings")
}


// === USER SETTINGS MODELS ===

model UserSettings {
  id           String   @id @default(cuid())
  userId       Int      @unique

  // Notification Settings (stored as JSON for flexibility)
  notifications Json    @default("{\"sms\": true, \"email\": true, \"pushNotifications\": false, \"marketingEmails\": false, \"propertyAlerts\": true, \"priceDropAlerts\": true, \"bookingUpdates\": true, \"securityAlerts\": true, \"systemNotifications\": true, \"preferredChannel\": \"email\", \"quietHours\": {\"enabled\": false, \"startTime\": \"22:00\", \"endTime\": \"08:00\", \"timezone\": \"UTC\"}}")

  // Security Settings
  security     Json    @default("{\"twoFactorEnabled\": false, \"twoFactorMethod\": \"sms\", \"loginNotifications\": true, \"passwordChangeNotifications\": true, \"suspiciousActivityAlerts\": true, \"sessionTimeout\": 30, \"maxActiveSessions\": 5, \"profileVisibility\": \"public\", \"dataSharing\": false, \"analyticsOptOut\": false}")

  // General Settings
  general      Json    @default("{\"language\": \"en\", \"timezone\": \"UTC\", \"currency\": \"USD\", \"dateFormat\": \"MM/DD/YYYY\", \"timeFormat\": \"12h\", \"accountDeactivated\": false, \"dataProcessingConsent\": true, \"marketingConsent\": false, \"compactMode\": false, \"showActivityStatus\": true}")

  // Appearance Settings
  appearance   Json    @default("{\"theme\": \"light\", \"fontSize\": \"medium\", \"compactMode\": false, \"colorScheme\": \"default\"}")

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_settings")
}

model UserVerification {
  id                String    @id @default(cuid())
  userId            Int

  // Verification Status
  emailVerified     Boolean   @default(false)
  phoneVerified     Boolean   @default(false)

  // Verification Timestamps
  emailVerifiedAt   DateTime?
  phoneVerifiedAt   DateTime?

  // Last Verification Attempts
  lastEmailVerificationSent DateTime?
  lastPhoneVerificationSent DateTime?

  // Verification Codes (temporary storage)
  emailVerificationCode     String?
  phoneVerificationCode     String?
  emailCodeExpires          DateTime?
  phoneCodeExpires          DateTime?

  // Verification Attempts Counter
  emailVerificationAttempts Int       @default(0)
  phoneVerificationAttempts Int       @default(0)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([emailVerified])
  @@index([phoneVerified])
  @@map("user_verifications")
}

model ConnectedAccount {
  id           String    @id @default(cuid())
  userId       Int

  // Account Details
  provider     String    // google, apple, facebook, microsoft
  providerId   String    // External provider user ID
  email        String

  // Connection Status
  connected    Boolean   @default(true)
  connectedAt  DateTime  @default(now())
  lastUsed     DateTime?

  // Additional metadata
  metadata     Json?     // Store provider-specific data

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
  @@index([connected])
  @@map("connected_accounts")
}
