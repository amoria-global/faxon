// prisma/schema.prisma - Updated for Escrow Payment System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// === USER MANAGEMENT ===

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  firstName String
  lastName  String
  password  String?

  // OAuth
  provider   String  @default("manual") // manual, google, apple
  providerId String?

  // Profile
  phone            String?
  phoneCountryCode String?
  profileImage     String?

  // Tour Guide Employment Type fields
  tourGuideType         String?    
  nationalId           String?   
  companyTIN           String?    
  companyName          String?    
  verificationDocument String?    
  employmentContract   String?    

  // Address (flexible international support)
  country    String?
  state      String?
  province   String?
  city       String?
  street     String?
  zipCode    String?
  postalCode String?
  postcode   String?
  pinCode    String?
  eircode    String?
  cep        String?
  district   String?
  county     String?
  region     String?

  // User Management
  status   String @default("pending") // active, inactive, pending, suspended, unverified
  userType String @default("guest") // guest, agent, tourguide, host

  // Tour Guide Specific Fields
  bio             String?
  experience      Int?
  languages       Json?
  specializations Json?
  rating          Float   @default(0)
  totalTours      Int     @default(0)
  isVerified      Boolean @default(false)
  licenseNumber   String?
  certifications  Json?

  // Activity Tracking
  totalSessions    Int     @default(0)
  twoFactorEnabled Boolean @default(false)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?

  // KYC Fields
  kycCompleted     Boolean   @default(false)
  kycSubmittedAt   DateTime?
  kycStatus        String    @default("pending") // pending, approved, rejected
  addressDocument  String?   // URL to address verification document

  // Forgot Password Fields
  resetPasswordOtp     String?
  resetPasswordExpires DateTime?

  // Relations
  sessions UserSession[]

  // Property Relations
  properties      Property[]
  bookingsAsGuest Booking[]  @relation("GuestBookings")
  reviews         Review[]
  wishlists       Wishlist[]

  // Escrow Relations (NEW)
  escrowTransactions            EscrowTransaction[]   @relation("UserEscrowTransactions")
  escrowTransactionsAsRecipient EscrowTransaction[]   @relation("RecipientEscrowTransactions")
  withdrawalRequests            WithdrawalRequest[]
  escrowNotifications           EscrowNotification[]

  // Wallet Relations (UPDATED)
  wallet Wallet?

  // Payment Relations (UPDATED - keeping for compatibility)
  paymentTransactions PaymentTransaction[]
  bankAccounts        BankAccount[]
  mobileMoneyAccounts MobileMoneyAccount[]
  paymentSettings     PaymentSettings?

  // Host/Agent Relations
  hostPayouts      Payout[]        @relation("HostPayouts")
  hostEarnings     HostEarning[]   @relation("HostEarnings")
  agentBookings    AgentBooking[]  @relation("AgentBookings")
  clientBookings   AgentBooking[]  @relation("ClientBookings")
  tourEarnings     TourEarnings[]

  // Tour Relations
  toursAsGuide         Tour[]             @relation("TourGuideToTours")
  tourBookingsAsGuest  TourBooking[]      @relation("GuestTourBookings")
  tourReviews          TourReview[]
  sentTourMessages     TourMessage[]      @relation("TourMessageSender")
  receivedTourMessages TourMessage[]      @relation("TourMessageReceiver")
  tourNotifications    TourNotification[]

  // Enhanced guest management
  verificationStatus     String? @default("unverified")
  preferredCommunication String? @default("email")
  hostNotes              String?
  averageRating          Float   @default(0)

  @@map("users")
}

model UserSession {
  id           String @id @default(cuid())
  userId       Int
  sessionToken String @unique
  refreshToken String @unique

  // Device Info
  device    String?
  browser   String?
  location  String?
  ipAddress String?

  // Session Status
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  expiresAt    DateTime

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@map("user_sessions")
}

// === ESCROW PAYMENT SYSTEM (NEW) ===

model EscrowTransaction {
  id String @id @default(cuid())

  // User Relations
  userId      Int
  user        User  @relation("UserEscrowTransactions", fields: [userId], references: [id], onDelete: Cascade)
  recipientId Int?
  recipient   User? @relation("RecipientEscrowTransactions", fields: [recipientId], references: [id], onDelete: SetNull)

  // Transaction Details
  type        String // DEPOSIT, RELEASE, WITHDRAWAL, REFUND
  amount      Float
  currency    String  @default("RWF")
  status      String  @default("PENDING") // PENDING, HELD, READY, RELEASED, REFUNDED, FAILED, CANCELLED
  reference   String  @unique
  description String?

  // Pesapal Integration
  escrowId   String? // Pesapal order ID
  externalId String? // Pesapal tracking ID
  paymentUrl String? // Pesapal checkout URL

  // P2P and Transfer specific
  isP2P            Boolean @default(false)
  sourceEscrowId   String?
  transferType     String? // full, partial
  notifyBySMS      Boolean @default(false)

  // Status Tracking
  fundedAt           DateTime?
  releasedAt         DateTime?
  releasedBy         Int?
  releaseReason      String?
  disputedAt         DateTime?
  disputedBy         Int?
  disputeReason      String?
  resolvedAt         DateTime?
  resolvedBy         Int?
  resolutionReason   String?
  cancelledAt        DateTime?
  cancellationReason String?
  refundedAt         DateTime?

  // Additional Data
  metadata Json? // Store split rules, billing info, etc.

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  notifications EscrowNotification[]

  @@index([userId])
  @@index([recipientId])
  @@index([status])
  @@index([type])
  @@index([currency])
  @@index([escrowId])
  @@index([reference])
  @@index([createdAt])
  @@map("escrow_transactions")
}

model WithdrawalRequest {
  id String @id @default(cuid())

  // User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Withdrawal Details
  amount   Float
  currency String @default("RWF")
  method   String // MOBILE, BANK
  status   String @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED

  // Destination (stored as JSON for flexibility)
  destination Json // { holderName, accountNumber, mobileProvider?, bankCode?, etc. }

  // Processing
  pesapalPayoutId String? // Pesapal payout request ID
  reference       String  @unique
  failureReason   String?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  @@index([userId])
  @@index([status])
  @@index([reference])
  @@index([createdAt])
  @@map("withdrawal_requests")
}

model EscrowNotification {
  id String @id @default(cuid())

  // User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Related Transaction (optional)
  escrowTransactionId String?
  escrowTransaction   EscrowTransaction? @relation(fields: [escrowTransactionId], references: [id], onDelete: SetNull)

  // Notification Details
  type    String // escrow_created, escrow_funded, release_requested, etc.
  title   String
  message String
  data    Json? // Additional notification data

  // Delivery Channels
  channels Json // ["email", "sms", "push", "in_app"]

  // Status
  isRead Boolean   @default(false)
  readAt DateTime?
  sentAt DateTime?

  // Delivery Status
  emailSent Boolean @default(false)
  smsSent   Boolean @default(false)
  pushSent  Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([escrowTransactionId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("escrow_notifications")
}

// === WALLET SYSTEM (UPDATED) ===

model Wallet {
  id     String @id @default(cuid())
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Balance
  balance  Float  @default(0)
  currency String @default("RWF")

  // Account Details
  accountNumber String?

  // Status
  isActive   Boolean @default(true)
  isVerified Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions WalletTransaction[]

  @@index([userId])
  @@map("wallets")
}

model WalletTransaction {
  id String @id @default(cuid())

  // Wallet
  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  // Transaction Details
  type          String // credit, debit
  amount        Float
  balanceBefore Float
  balanceAfter  Float

  // References
  reference     String
  description   String
  transactionId String? // Link to PaymentTransaction or EscrowTransaction

  // Timestamps
  createdAt DateTime @default(now())

  @@index([walletId])
  @@index([reference])
  @@index([createdAt])
  @@map("wallet_transactions")
}

// === EXISTING MODELS (Keeping for backward compatibility) ===

model Property {
  id Int @id @default(autoincrement())

  // Basic Information
  name            String
  location        String
  upiNumber       String?
  propertyAddress String?
  type            String
  category        String
  description     String?

  // Pricing
  pricePerNight     Float
  pricePerTwoNights Float?

  // Capacity
  beds      Int
  baths     Int
  maxGuests Int

  // Features & Amenities
  features Json

  // Media
  images  Json
  video3D String?

  // Host Information
  hostId       Int
  host         User  @relation(fields: [hostId], references: [id], onDelete: Cascade)
  ownerDetails Json?

  // Availability
  availableFrom DateTime?
  availableTo   DateTime?
  minStay       Int       @default(1)
  maxStay       Int?

  // Status & Verification
  status        String  @default("pending")
  isVerified    Boolean @default(false)
  isInstantBook Boolean @default(false)

  // Analytics
  views         Int   @default(0)
  totalBookings Int   @default(0)
  averageRating Float @default(0)
  reviewsCount  Int   @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings     Booking[]
  reviews      Review[]
  blockedDates BlockedDate[]
  pricingRules PricingRule[]
  wishlistedBy Wishlist[]
  hostEarnings HostEarning[] @relation("PropertyEarnings")

  @@index([hostId])
  @@index([status])
  @@map("properties")
}

model Booking {
  id String @id @default(cuid())

  // Property & Guest
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  guestId    Int
  guest      User     @relation("GuestBookings", fields: [guestId], references: [id], onDelete: Cascade)

  // Booking Details
  checkIn    DateTime
  checkOut   DateTime
  guests     Int
  totalPrice Float

  // Communication
  message      String?
  hostResponse String?

  // Status
  status String @default("pending")

  // Payment
  paymentStatus String  @default("pending")
  paymentMethod String?
  transactionId String?

  // Enhanced booking management
  notes                    String?
  specialRequests          String?
  checkInInstructions      String?
  checkOutInstructions     String?
  guestNotes               String?
  cancellationReason       String?
  cancelledAt              DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reviews     Review[]
  hostEarning HostEarning? @relation("BookingEarning")

  @@index([propertyId])
  @@index([guestId])
  @@index([status])
  @@map("bookings")
}

model Review {
  id String @id @default(cuid())

  // Relations
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId  String?
  booking    Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  // Review Content
  rating  Int
  comment String
  images  Json?

  // Host Response
  response     String?
  responseDate DateTime?

  // Status
  isVisible  Boolean @default(true)
  isReported Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([propertyId, userId])
  @@index([propertyId])
  @@index([userId])
  @@index([rating])
  @@map("reviews")
}

model BlockedDate {
  id String @id @default(cuid())

  // Property
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Date Range
  startDate DateTime
  endDate   DateTime
  reason    String?

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
  @@index([startDate, endDate])
  @@map("blocked_dates")
}

model PricingRule {
  id String @id @default(cuid())

  // Property
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Rule Details
  name      String
  type      String
  startDate DateTime
  endDate   DateTime

  // Price Modification
  priceModifier Float
  modifierType  String

  // Conditions
  minStay Int?
  maxStay Int?

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
  @@index([startDate, endDate])
  @@map("pricing_rules")
}

model Wishlist {
  id String @id @default(cuid())

  // Relations
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())

  @@unique([userId, propertyId])
  @@index([userId])
  @@map("wishlists")
}

// === TOUR MODELS (Keeping existing structure) ===

model Tour {
  id String @id @default(cuid())

  // Basic Information
  title            String
  description      String
  shortDescription String

  // Tour Guide
  tourGuideId Int
  tourGuide   User @relation("TourGuideToTours", fields: [tourGuideId], references: [id], onDelete: Cascade)

  // Categories & Types
  category String
  type     String

  // Duration & Capacity
  duration     Float
  maxGroupSize Int
  minGroupSize Int   @default(1)

  // Pricing
  price    Float
  currency String @default("USD")

  // Media
  images Json

  // Itinerary
  itinerary Json

  // Details
  inclusions   Json
  exclusions   Json
  requirements Json

  // Difficulty & Location
  difficulty      String
  locationCountry String
  locationState   String?
  locationCity    String
  locationAddress String
  latitude        Float?
  longitude       Float?
  locationZipCode String?
  meetingPoint    String

  // Status & Metrics
  isActive      Boolean @default(true)
  rating        Float   @default(0)
  totalReviews  Int     @default(0)
  totalBookings Int     @default(0)
  views         Int     @default(0)

  // Tags
  tags Json

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  schedules TourSchedule[]
  bookings  TourBooking[]
  reviews   TourReview[]
  messages  TourMessage[]
  earnings  TourEarnings[]

  @@index([tourGuideId])
  @@index([category])
  @@index([isActive])
  @@map("tours")
}

model TourCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  icon        String? // Icon class or URL
  color       String? // Hex color for UI
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([sortOrder])
  @@map("tour_categories")
}

model TourSchedule {
  id String @id @default(cuid())

  // Tour
  tourId      String
  tour        Tour   @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourGuideId Int

  // Schedule Details
  startDate DateTime
  endDate   DateTime
  startTime String
  endTime   String

  // Availability
  availableSlots Int
  bookedSlots    Int     @default(0)
  isAvailable    Boolean @default(true)

  // Pricing Override
  price        Float?
  specialNotes String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings TourBooking[]

  @@index([tourId])
  @@index([tourGuideId])
  @@index([startDate, endDate])
  @@map("tour_schedules")
}

model TourBooking {
  id String @id @default(cuid())

  // Relations
  userId      Int
  user        User         @relation("GuestTourBookings", fields: [userId], references: [id], onDelete: Cascade)
  tourId      String
  tour        Tour         @relation(fields: [tourId], references: [id], onDelete: Cascade)
  scheduleId  String
  schedule    TourSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  tourGuideId Int

  // Booking Details
  numberOfParticipants Int
  participants         Json
  specialRequests      String?

  // Pricing
  totalAmount Float
  currency    String @default("USD")

  // Status
  status        String  @default("pending")
  paymentStatus String  @default("pending")
  paymentId     String?

  // Check-in/out
  checkInStatus String    @default("not_checked_in")
  checkInTime   DateTime?
  checkOutTime  DateTime?

  // Refund
  refundAmount Float?
  refundReason String?

  // Internal Notes
  guestNotes String?

  // Timestamps
  bookingDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reviews  TourReview[]
  messages TourMessage[]
  earnings TourEarnings[]

  @@index([userId])
  @@index([tourId])
  @@index([scheduleId])
  @@index([tourGuideId])
  @@index([status])
  @@map("tour_bookings")
}

model TourReview {
  id String @id @default(cuid())

  // Relations
  bookingId   String
  booking     TourBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  userId      Int
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tourId      String
  tour        Tour        @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourGuideId Int

  // Review Content
  rating         Int
  comment        String
  images         Json?
  pros           Json
  cons           Json
  wouldRecommend Boolean
  isAnonymous    Boolean @default(false)

  // Verification & Status
  isVerified Boolean @default(true)
  isVisible  Boolean @default(true)
  isReported Boolean @default(false)

  // Engagement
  helpfulCount Int @default(0)
  reportCount  Int @default(0)

  // Guide Response
  response     String?
  responseDate DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([bookingId, userId])
  @@index([userId])
  @@index([tourId])
  @@index([tourGuideId])
  @@index([rating])
  @@map("tour_reviews")
}

model TourMessage {
  id String @id @default(cuid())

  // Relations
  senderId   Int
  sender     User @relation("TourMessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId Int
  receiver   User @relation("TourMessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  // Context
  bookingId String?
  booking   TourBooking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  tourId    String?
  tour      Tour?        @relation(fields: [tourId], references: [id], onDelete: SetNull)

  // Message Content
  subject     String?
  message     String
  attachments Json?
  messageType String

  // Status
  isRead Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId])
  @@index([receiverId])
  @@index([bookingId])
  @@index([tourId])
  @@map("tour_messages")
}

model TourNotification {
  id String @id @default(cuid())

  // User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Notification Details
  type    String
  title   String
  message String
  data    Json?

  // Status
  isRead Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@map("tour_notifications")
}

model TourEarnings {
  id String @id @default(cuid())

  // Relations
  tourGuideId Int
  tourGuide   User        @relation(fields: [tourGuideId], references: [id], onDelete: Cascade)
  bookingId   String
  booking     TourBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  tourId      String
  tour        Tour        @relation(fields: [tourId], references: [id], onDelete: Cascade)

  // Financial Details
  amount     Float
  commission Float
  netAmount  Float
  currency   String @default("USD")

  // Status
  status String @default("pending")

  // Payout Details
  payoutDate    DateTime?
  payoutMethod  String?
  transactionId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tourGuideId])
  @@index([bookingId])
  @@index([tourId])
  @@index([status])
  @@map("tour_earnings")
}

// === PAYMENT SYSTEM (Legacy - keeping for compatibility) ===

model PaymentTransaction {
  id String @id @default(cuid())

  // User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Transaction Details
  type     String
  method   String
  amount   Float
  currency String @default("KES")
  status   String @default("pending")

  // References
  reference          String  @unique
  externalId         String?
  jengaTransactionId String?

  // Details
  description String?
  metadata    Json?

  // Fees & Charges
  charges   Float?
  netAmount Float?

  // Account Information
  sourceAccount      String?
  destinationAccount String?
  phoneNumber        String?
  bankCode           String?
  accountName        String?

  // Escrow Integration (NEW)
  escrowTransactionId String?
  isEscrowBased       Boolean @default(false)
  escrowStatus        String?

  // Failure Information
  failureReason String?

  // Callback
  callbackUrl String?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([method])
  @@index([reference])
  @@index([createdAt])
  @@map("payment_transactions")
}

model BankAccount {
  id String @id @default(cuid())

  // User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Account Details
  accountNumber String
  accountName   String
  bankCode      String
  bankName      String
  branchCode    String?

  // Status
  isDefault  Boolean @default(false)
  isVerified Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, accountNumber, bankCode])
  @@index([userId])
  @@map("bank_accounts")
}

model MobileMoneyAccount {
  id String @id @default(cuid())

  // User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Account Details
  phoneNumber String
  provider    String
  accountName String

  // Status
  isDefault  Boolean @default(false)
  isVerified Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, phoneNumber])
  @@index([userId])
  @@map("mobile_money_accounts")
}

model PaymentSettings {
  id String @id @default(cuid())

  // User
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Settings
  defaultCurrency     String  @default("KES")
  autoWithdrawal      Boolean @default(false)
  withdrawalThreshold Float?
  defaultBankAccount  String?
  defaultMobileNumber String?

  // Notifications
  notificationPreferences Json

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("payment_settings")
}

model Payout {
  id String @id @default(cuid())

  // Host
  hostId Int
  host   User @relation("HostPayouts", fields: [hostId], references: [id], onDelete: Cascade)

  // Payout Details
  amount   Float
  currency String @default("USD")
  status   String @default("pending")
  method   String

  // Period covered by this payout
  periodStart DateTime
  periodEnd   DateTime

  // Fees and net amount
  fees      Float @default(0)
  netAmount Float

  // External references
  reference  String  @unique
  externalId String?

  // Failure information
  failureReason String?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  processedAt DateTime?

  earnings HostEarning[] @relation("PayoutEarnings")

  @@index([hostId])
  @@index([status])
  @@map("payouts")
}

model HostEarning {
  id String @id @default(cuid())

  // Relations
  hostId     Int
  host       User     @relation("HostEarnings", fields: [hostId], references: [id], onDelete: Cascade)
  bookingId  String   @unique
  booking    Booking  @relation("BookingEarning", fields: [bookingId], references: [id], onDelete: Cascade)
  propertyId Int
  property   Property @relation("PropertyEarnings", fields: [propertyId], references: [id], onDelete: Cascade)

  // Financial details
  grossAmount Float
  platformFee Float
  hostEarning Float
  currency    String @default("USD")

  // Payout tracking
  payoutId String?
  payout   Payout? @relation("PayoutEarnings", fields: [payoutId], references: [id], onDelete: SetNull)

  // Status
  status String @default("pending")

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  earnedAt  DateTime?

  @@index([hostId])
  @@index([bookingId])
  @@index([propertyId])
  @@index([status])
  @@map("host_earnings")
}

model AgentBooking {
  id             String   @id @default(cuid())
  agentId        Int
  agent          User     @relation("AgentBookings", fields: [agentId], references: [id], onDelete: Cascade)
  clientId       Int
  client         User     @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)
  bookingType    String
  bookingId      String
  commission     Float
  commissionRate Float
  status         String   @default("active")
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([agentId])
  @@index([clientId])
  @@map("agent_bookings")
}