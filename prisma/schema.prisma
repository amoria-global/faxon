generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  firstName          String
  lastName           String
  password           String?
  provider           String   @default("manual")
  providerId         String?
  phone              String?
  phoneCountryCode   String?
  profileImage       String?
  passportPhotoUrl   String? // Added from the second version

  // Granular address fields
  district           String?
  sector             String?
  street             String?
  province           String?
  state              String?
  country            String?
  county             String?
  region             String?
  city               String?
  zipCode            String?
  postalCode         String?
  postcode           String?
  pinCode            String?
  eircode            String?
  cep                String?

  status                   String    @default("pending")
  userType                 String    @default("guest")
  bio                      String?
  experience               Int?
  languages                Json?
  specializations          Json?
  rating                   Float     @default(0)
  averageRating            Float     @default(0)
  totalTours               Int       @default(0)
  isVerified               Boolean   @default(false)
  licenseNumber            String?
  certifications           Json?
  totalSessions            Int       @default(0)
  twoFactorEnabled         Boolean   @default(false)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  lastLogin                DateTime?
  resetPasswordOtp         String?
  resetPasswordExpires     DateTime?
  verificationStatus       String?   @default("unverified")
  preferredCommunication   String?   @default("email")
  hostNotes                String?
  companyName              String?
  companyTIN               String?
  employmentContract       String?
  nationalId               String?
  tourGuideType            String?
  verificationDocument     String?
  addressDocument          String?
  kycCompleted             Boolean   @default(false)
  kycStatus                String    @default("pending")
  kycSubmittedAt           DateTime?

  // Referral system fields
  referredBy               Int?
  referralCode             String?
  referralStatus           String    @default("Pending")
  referredAt               DateTime?

  // Relations
  agentBookings                   AgentBooking[]           @relation("AgentBookings")
  clientBookings                  AgentBooking[]           @relation("ClientBookings")
  agentMetrics                    AgentPerformanceMetric[] @relation("AgentMetrics")
  agentReviews                    AgentReview[]            @relation("AgentReviews")
  clientReviews                   AgentReview[]            @relation("ClientReviews")
  bankAccounts                    BankAccount[]
  bookingsAsGuest                 Booking[]                @relation("GuestBookings")
  agentInteractions               ClientInteraction[]      @relation("AgentInteractions")
  clientInteractions              ClientInteraction[]      @relation("ClientInteractions")
  escrowNotifications             EscrowNotification[]
  escrowTransactionsAsRecipient   EscrowTransaction[]      @relation("RecipientEscrowTransactions")
  escrowTransactions              EscrowTransaction[]      @relation("UserEscrowTransactions")
  hostEarnings                    HostEarning[]            @relation("HostEarnings")
  agentInquiries                  Inquiry[]                @relation("AgentInquiries")
  clientInquiries                 Inquiry[]                @relation("ClientInquiries")
  agentLeads                      Lead[]                   @relation("AgentLeads")
  mobileMoneyAccounts             MobileMoneyAccount[]
  paymentSettings                 PaymentSettings?
  paymentTransactions             PaymentTransaction[]
  hostPayouts                     Payout[]                 @relation("HostPayouts")
  properties                      Property[]
  propertyViews                   PropertyView[]           @relation("UserPropertyViews")
  reviews                         Review[]
  tourBookingsAsGuest             TourBooking[]            @relation("GuestTourBookings")
  tourEarnings                    TourEarnings[]
  receivedTourMessages            TourMessage[]            @relation("TourMessageReceiver")
  sentTourMessages                TourMessage[]            @relation("TourMessageSender")
  tourNotifications               TourNotification[]
  tourReviews                     TourReview[]
  toursAsGuide                    Tour[]                   @relation("TourGuideToTours")
  sessions                        UserSession[]
  wallet                          Wallet?
  wishlists                       Wishlist[]
  withdrawalRequests              WithdrawalRequest[]
  activityLogs                    ActivityLog[]
  contactMessages                 ContactMessage[]
  connected_accounts              connected_accounts[]
  user_settings                   user_settings?
  user_verifications              user_verifications[]

  // Referral self-relation
  referrer                        User?                    @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals                       User[]                   @relation("UserReferrals")

  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       Int
  sessionToken String   @unique
  refreshToken String   @unique
  device       String?
  browser      String?
  location     String?
  ipAddress    String?
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_sessions")
}

model EscrowTransaction {
  id                   String               @id @default(cuid())
  userId               Int
  recipientId          Int?
  type                 String
  amount               Float
  currency             String               @default("RWF")
  status               String               @default("PENDING")
  reference            String               @unique
  description          String?
  escrowId             String?
  externalId           String?
  paymentUrl           String?
  sourceEscrowId       String?
  transferType         String?
  isP2P                Boolean              @default(false)
  notifyBySMS          Boolean              @default(false)
  fundedAt             DateTime?
  releasedAt           DateTime?
  releasedBy           Int?
  releaseReason        String?
  disputedAt           DateTime?
  disputedBy           Int?
  disputeReason        String?
  resolvedAt           DateTime?
  resolvedBy           Int?
  resolutionReason     String?
  cancelledAt          DateTime?
  cancellationReason   String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  metadata             Json?
  refundedAt           DateTime?
  pesapalOrderId       String?
  pesapalTrackingId    String?
  notifications        EscrowNotification[]
  recipient            User?                @relation("RecipientEscrowTransactions", fields: [recipientId], references: [id])
  user                 User                 @relation("UserEscrowTransactions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recipientId])
  @@index([status])
  @@index([type])
  @@index([currency])
  @@index([escrowId])
  @@index([reference])
  @@index([createdAt])
  @@map("escrow_transactions")
}

model WithdrawalRequest {
  id              String    @id @default(cuid())
  userId          Int
  amount          Float
  currency        String    @default("RWF")
  method          String
  status          String    @default("PENDING")
  destination     Json
  pesapalPayoutId String?
  reference       String    @unique
  failureReason   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([reference])
  @@index([createdAt])
  @@map("withdrawal_requests")
}

model EscrowNotification {
  id                  String             @id @default(cuid())
  userId              Int
  escrowTransactionId String?
  type                String
  title               String
  message             String
  data                Json?
  channels            Json
  isRead              Boolean            @default(false)
  readAt              DateTime?
  sentAt              DateTime?
  emailSent           Boolean            @default(false)
  smsSent             Boolean            @default(false)
  pushSent            Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  escrowTransaction   EscrowTransaction? @relation(fields: [escrowTransactionId], references: [id])
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([escrowTransactionId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("escrow_notifications")
}

model Wallet {
  id            String              @id @default(cuid())
  userId        Int                 @unique
  balance       Float               @default(0)
  currency      String              @default("RWF")
  accountNumber String?
  isActive      Boolean             @default(true)
  isVerified    Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  transactions  WalletTransaction[]
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("wallets")
}

model WalletTransaction {
  id            String   @id @default(cuid())
  walletId      String
  type          String
  amount        Float
  balanceBefore Float
  balanceAfter  Float
  reference     String
  description   String
  transactionId String?
  createdAt     DateTime @default(now())
  wallet        Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([reference])
  @@index([createdAt])
  @@map("wallet_transactions")
}

model SmsLog {
  id          String   @id @default(cuid())
  userId      Int
  phoneNumber String
  messageType String
  status      String
  messageId   String?
  metadata    Json?
  error       String?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([messageType])
  @@index([createdAt])
  @@map("sms_logs")
}

model Property {
  id                Int            @id @default(autoincrement())
  name              String
  location          String
  type              String
  category          String
  description       String?
  pricePerNight     Float
  pricePerTwoNights Float?
  beds              Int
  baths             Int
  maxGuests         Int
  features          Json
  images            Json
  video3D           String?
  hostId            Int
  ownerDetails      Json?
  availableFrom     DateTime?
  availableTo       DateTime?
  minStay           Int            @default(1)
  maxStay           Int?
  status            String         @default("pending")
  isVerified        Boolean        @default(false)
  isInstantBook     Boolean        @default(false)
  views             Int            @default(0)
  totalBookings     Int            @default(0)
  averageRating     Float          @default(0)
  reviewsCount      Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  propertyAddress   String?
  upiNumber         String?
  blockedDates      BlockedDate[]
  bookings          Booking[]
  hostEarnings      HostEarning[]  @relation("PropertyEarnings")
  pricingRules      PricingRule[]
  host              User           @relation(fields: [hostId], references: [id], onDelete: Cascade)
  propertyViews     PropertyView[] @relation("PropertyViews")
  reviews           Review[]
  wishlistedBy      Wishlist[]

  @@index([hostId])
  @@index([status])
  @@map("properties")
}

model Booking {
  id                   String       @id @default(cuid())
  propertyId           Int
  guestId              Int
  checkIn              DateTime
  checkOut             DateTime
  guests               Int
  totalPrice           Float
  message              String?
  hostResponse         String?
  status               String       @default("pending")
  paymentStatus        String       @default("pending")
  paymentMethod        String?
  transactionId        String?
  notes                String?
  specialRequests      String?
  checkInInstructions  String?
  checkOutInstructions String?
  guestNotes           String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  cancellationReason   String?
  cancelledAt          DateTime?
  guest                User         @relation("GuestBookings", fields: [guestId], references: [id], onDelete: Cascade)
  property             Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  hostEarning          HostEarning? @relation("BookingEarning")
  reviews              Review[]

  @@index([propertyId])
  @@index([guestId])
  @@index([status])
  @@map("bookings")
}

model Review {
  id           String    @id @default(cuid())
  propertyId   Int
  userId       Int
  bookingId    String?
  rating       Int
  comment      String
  images       Json?
  response     String?
  responseDate DateTime?
  isVisible    Boolean   @default(true)
  isReported   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  booking      Booking?  @relation(fields: [bookingId], references: [id])
  property     Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, userId])
  @@index([propertyId])
  @@index([userId])
  @@index([rating])
  @@map("reviews")
}

model BlockedDate {
  id         String   @id @default(cuid())
  propertyId Int
  startDate  DateTime
  endDate    DateTime
  reason     String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([startDate, endDate])
  @@map("blocked_dates")
}

model PricingRule {
  id            String   @id @default(cuid())
  propertyId    Int
  name          String
  type          String
  startDate     DateTime
  endDate       DateTime
  priceModifier Float
  modifierType  String
  minStay       Int?
  maxStay       Int?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([startDate, endDate])
  @@map("pricing_rules")
}

model Wishlist {
  id         String   @id @default(cuid())
  userId     Int
  propertyId Int
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([userId])
  @@map("wishlists")
}

model Tour {
  id               String         @id @default(cuid())
  title            String
  description      String
  shortDescription String
  tourGuideId      Int
  category         String
  type             String
  duration         Float
  maxGroupSize     Int
  minGroupSize     Int            @default(1)
  price            Float
  currency         String         @default("USD")
  images           Json
  itinerary        Json
  inclusions       Json
  exclusions       Json
  requirements     Json
  difficulty       String
  locationCountry  String
  locationState    String?
  locationCity     String
  locationAddress  String
  latitude         Float?
  longitude        Float?
  locationZipCode  String?
  meetingPoint     String
  isActive         Boolean        @default(true)
  rating           Float          @default(0)
  totalReviews     Int            @default(0)
  totalBookings    Int            @default(0)
  views            Int            @default(0)
  tags             Json
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  bookings         TourBooking[]
  earnings         TourEarnings[]
  messages         TourMessage[]
  reviews          TourReview[]
  schedules        TourSchedule[]
  tourGuide        User           @relation("TourGuideToTours", fields: [tourGuideId], references: [id], onDelete: Cascade)

  @@index([tourGuideId])
  @@index([category])
  @@index([isActive])
  @@map("tours")
}

model TourCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([sortOrder])
  @@map("tour_categories")
}

model TourSchedule {
  id             String        @id @default(cuid())
  tourId         String
  tourGuideId    Int
  startDate      DateTime
  endDate        DateTime
  startTime      String
  endTime        String
  availableSlots Int
  bookedSlots    Int           @default(0)
  isAvailable    Boolean       @default(true)
  price          Float?
  specialNotes   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  bookings       TourBooking[]
  tour           Tour          @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@index([tourId])
  @@index([tourGuideId])
  @@index([startDate, endDate])
  @@map("tour_schedules")
}

model TourBooking {
  id                   String       @id @default(cuid())
  userId               Int
  tourId               String
  scheduleId           String
  tourGuideId          Int
  numberOfParticipants Int
  participants         Json
  specialRequests      String?
  totalAmount          Float
  currency             String       @default("USD")
  status               String       @default("pending")
  paymentStatus        String       @default("pending")
  paymentId            String?
  checkInStatus        String       @default("not_checked_in")
  checkInTime          DateTime?
  checkOutTime         DateTime?
  refundAmount         Float?
  refundReason         String?
  guestNotes           String?
  bookingDate          DateTime     @default(now())
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  schedule             TourSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  tour                 Tour         @relation(fields: [tourId], references: [id], onDelete: Cascade)
  user                 User         @relation("GuestTourBookings", fields: [userId], references: [id], onDelete: Cascade)
  earnings             TourEarnings[]
  messages             TourMessage[]
  reviews              TourReview[]

  @@index([userId])
  @@index([tourId])
  @@index([scheduleId])
  @@index([tourGuideId])
  @@index([status])
  @@map("tour_bookings")
}

model TourReview {
  id             String      @id @default(cuid())
  bookingId      String
  userId         Int
  tourId         String
  tourGuideId    Int
  rating         Int
  comment        String
  images         Json?
  pros           Json
  cons           Json
  wouldRecommend Boolean
  isAnonymous    Boolean     @default(false)
  isVerified     Boolean     @default(true)
  isVisible      Boolean     @default(true)
  isReported     Boolean     @default(false)
  helpfulCount   Int         @default(0)
  reportCount    Int         @default(0)
  response       String?
  responseDate   DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  booking        TourBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  tour           Tour        @relation(fields: [tourId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bookingId, userId])
  @@index([userId])
  @@index([tourId])
  @@index([tourGuideId])
  @@index([rating])
  @@map("tour_reviews")
}

model TourMessage {
  id          String       @id @default(cuid())
  senderId    Int
  receiverId  Int
  bookingId   String?
  tourId      String?
  subject     String?
  message     String
  attachments Json?
  messageType String
  isRead      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  booking     TourBooking? @relation(fields: [bookingId], references: [id])
  receiver    User         @relation("TourMessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User         @relation("TourMessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  tour        Tour?        @relation(fields: [tourId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([bookingId])
  @@index([tourId])
  @@map("tour_messages")
}

model TourNotification {
  id        String   @id @default(cuid())
  userId    Int
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@map("tour_notifications")
}

model TourEarnings {
  id            String      @id @default(cuid())
  tourGuideId   Int
  bookingId     String
  tourId        String
  amount        Float
  commission    Float
  netAmount     Float
  currency      String      @default("USD")
  status        String      @default("pending")
  payoutDate    DateTime?
  payoutMethod  String?
  transactionId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  booking       TourBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  tourGuide     User        @relation(fields: [tourGuideId], references: [id], onDelete: Cascade)
  tour          Tour        @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@index([tourGuideId])
  @@index([bookingId])
  @@index([tourId])
  @@index([status])
  @@map("tour_earnings")
}

model PaymentTransaction {
  id                   String   @id @default(cuid())
  userId               Int
  type                 String
  method               String
  amount               Float
  currency             String   @default("KES")
  status               String   @default("pending")
  reference            String   @unique
  externalId           String?
  jengaTransactionId   String?
  description          String?
  metadata             Json?
  charges              Float?
  netAmount            Float?
  sourceAccount        String?
  destinationAccount   String?
  phoneNumber          String?
  bankCode             String?
  accountName          String?
  failureReason        String?
  callbackUrl          String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  completedAt          DateTime?
  escrowStatus         String?
  escrowTransactionId  String?
  isEscrowBased        Boolean  @default(false)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([method])
  @@index([reference])
  @@index([createdAt])
  @@map("payment_transactions")
}

model BankAccount {
  id            String   @id @default(cuid())
  userId        Int
  accountNumber String
  accountName   String
  bankCode      String
  bankName      String
  branchCode    String?
  isDefault     Boolean  @default(false)
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountNumber, bankCode])
  @@index([userId])
  @@map("bank_accounts")
}

model MobileMoneyAccount {
  id          String   @id @default(cuid())
  userId      Int
  phoneNumber String
  provider    String
  accountName String
  isDefault   Boolean  @default(false)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, phoneNumber])
  @@index([userId])
  @@map("mobile_money_accounts")
}

model PaymentSettings {
  id                      String   @id @default(cuid())
  userId                  Int      @unique
  defaultCurrency         String   @default("KES")
  autoWithdrawal          Boolean  @default(false)
  withdrawalThreshold     Float?
  defaultBankAccount      String?
  defaultMobileNumber     String?
  notificationPreferences Json
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("payment_settings")
}

model Payout {
  id            String        @id @default(cuid())
  hostId        Int
  amount        Float
  currency      String        @default("USD")
  status        String        @default("pending")
  method        String
  periodStart   DateTime
  periodEnd     DateTime
  fees          Float         @default(0)
  netAmount     Float
  reference     String        @unique
  externalId    String?
  failureReason String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  processedAt   DateTime?
  earnings      HostEarning[] @relation("PayoutEarnings")
  host          User          @relation("HostPayouts", fields: [hostId], references: [id], onDelete: Cascade)

  @@index([hostId])
  @@index([status])
  @@map("payouts")
}

model HostEarning {
  id          String   @id @default(cuid())
  hostId      Int
  bookingId   String   @unique
  propertyId  Int
  grossAmount Float
  platformFee Float
  hostEarning Float
  currency    String   @default("USD")
  payoutId    String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  earnedAt    DateTime?
  booking     Booking  @relation("BookingEarning", fields: [bookingId], references: [id], onDelete: Cascade)
  host        User     @relation("HostEarnings", fields: [hostId], references: [id], onDelete: Cascade)
  payout      Payout?  @relation("PayoutEarnings", fields: [payoutId], references: [id])
  property    Property @relation("PropertyEarnings", fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([hostId])
  @@index([bookingId])
  @@index([propertyId])
  @@index([status])
  @@map("host_earnings")
}

model AgentBooking {
  id             String   @id @default(cuid())
  agentId        Int
  clientId       Int
  bookingType    String
  bookingId      String
  commission     Float
  commissionRate Float
  status         String   @default("active")
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  agent          User     @relation("AgentBookings", fields: [agentId], references: [id], onDelete: Cascade)
  client         User     @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([clientId])
  @@map("agent_bookings")
}

model Lead {
  id           String   @id @default(cuid())
  agentId      Int
  source       String
  type         String
  status       String   @default("new")
  priority     String   @default("medium")
  clientName   String?
  clientEmail  String?
  clientPhone  String?
  propertyId   Int?
  requirements Json?
  budget       Float?
  timeline     String?
  convertedAt  DateTime?
  bookingId    String?
  lostReason   String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  agent        User     @relation("AgentLeads", fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([status])
  @@index([source])
  @@index([createdAt])
  @@map("leads")
}

model Inquiry {
  id             String    @id @default(cuid())
  agentId        Int
  clientId       Int?
  type           String
  subject        String?
  message        String
  propertyId     Int?
  isUrgent       Boolean   @default(false)
  isResponded    Boolean   @default(false)
  respondedAt    DateTime?
  responseTime   Int?
  responseMethod String?
  resolution     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  agent          User      @relation("AgentInquiries", fields: [agentId], references: [id], onDelete: Cascade)
  client         User?     @relation("ClientInquiries", fields: [clientId], references: [id])

  @@index([agentId])
  @@index([clientId])
  @@index([isResponded])
  @@index([createdAt])
  @@map("inquiries")
}

model AgentReview {
  id                    String    @id @default(cuid())
  agentId               Int
  clientId              Int
  rating                Int
  comment               String?
  categories            Json?
  bookingId             String?
  serviceType           String?
  communicationRating   Int?
  professionalismRating Int?
  knowledgeRating       Int?
  responsivenessRating  Int?
  resultsRating         Int?
  response              String?
  responseDate          DateTime?
  isVisible             Boolean   @default(true)
  isReported            Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  agent                 User      @relation("AgentReviews", fields: [agentId], references: [id], onDelete: Cascade)
  client                User      @relation("ClientReviews", fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([agentId, clientId, bookingId])
  @@index([agentId])
  @@index([clientId])
  @@index([rating])
  @@index([createdAt])
  @@map("agent_reviews")
}

model PropertyView {
  id                 String   @id @default(cuid())
  propertyId         Int
  userId             Int?
  sessionId          String?
  ipAddress          String?
  userAgent          String?
  referrer           String?
  duration           Int?
  source             String?
  device             String?
  country            String?
  city               String?
  convertedToInquiry Boolean  @default(false)
  convertedToBooking Boolean  @default(false)
  inquiryId          String?
  bookingId          String?
  createdAt          DateTime @default(now())
  property           Property @relation("PropertyViews", fields: [propertyId], references: [id], onDelete: Cascade)
  user               User?    @relation("UserPropertyViews", fields: [userId], references: [id])

  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@map("property_views")
}

model AgentPerformanceMetric {
  id              String   @id @default(cuid())
  agentId         Int
  metricType      String
  value           Float
  unit            String?
  period          String
  periodStart     DateTime
  periodEnd       DateTime
  propertyCount   Int?
  clientCount     Int?
  bookingCount    Int?
  metadata        Json?
  marketAverage   Float?
  competitorRank  Int?
  improvementRate Float?
  calculatedAt    DateTime @default(now())
  updatedAt       DateTime @updatedAt
  agent           User     @relation("AgentMetrics", fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, metricType, period, periodStart])
  @@index([agentId])
  @@index([metricType])
  @@index([period])
  @@index([periodStart])
  @@map("agent_performance_metrics")
}

model ClientInteraction {
  id                 String    @id @default(cuid())
  agentId            Int
  clientId           Int
  type               String
  duration           Int?
  outcome            String?
  nextAction         String?
  dueDate            DateTime?
  propertyId         Int?
  bookingId          String?
  notes              String?
  clientSatisfaction Int?
  agentNotes         String?
  scheduledAt        DateTime?
  completedAt        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  agent              User      @relation("AgentInteractions", fields: [agentId], references: [id], onDelete: Cascade)
  client             User      @relation("ClientInteractions", fields: [clientId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([clientId])
  @@index([type])
  @@index([scheduledAt])
  @@index([createdAt])
  @@map("client_interactions")
}

model MarketData {
  id                    String   @id @default(cuid())
  region                String
  city                  String?
  area                  String?
  averagePropertyPrice  Float?
  averageCommissionRate Float?
  averageResponseTime   Float?
  averageConversionRate Float?
  averageRetentionRate  Float?
  totalActiveAgents     Int?
  totalActiveProperties Int?
  marketVolume          Float?
  period                String
  periodStart           DateTime
  periodEnd             DateTime
  dataSource            String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([region, period, periodStart])
  @@index([region])
  @@index([period])
  @@index([periodStart])
  @@map("market_data")
}

// ================================================================= //
//                            ADMIN & SITE MODELS                    //
// ================================================================= //
model VisitorTracking {
  id        Int       @id @default(autoincrement())
  ipAddress String?
  location  Json?
  country   String?
  city      String?
  region    String?
  timezone  String?
  userAgent String?
  pageUrl   String?
  referrer  String?
  sessionId String?
  createdAt DateTime? @default(now()) @db.Timestamptz(6)

  @@map("visitor_tracking")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  price       Float?
  imageUrl    String?   @map("image_url")
  category    String?
  isAvailable Boolean?  @map("is_available")
  siteUrl     String?   @map("site_url")
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @updatedAt @db.Timestamptz(6)

  @@map("products")
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(150)
  description String?
  price       Decimal? @db.Decimal(10, 2)
  category    String?  @db.VarChar(100)
  imageUrl    String?  @map("image_url") @db.VarChar(512)
  isActive    Boolean? @default(true) @map("is_active")
  status      String?
  icon        String?
  features    String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)

  @@map("services")
}

model Partner {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(150)
  description  String?
  logoUrl      String?  @map("logo_url") @db.VarChar(512)
  websiteUrl   String?  @map("website_url") @db.VarChar(255)
  contactEmail String?  @map("contact_email") @db.VarChar(150)
  isVisible    Boolean? @default(true) @map("is_visible")
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt @db.Timestamp(6)

  @@map("partners")
}

model ContactMessage {
  id          Int       @id @default(autoincrement())
  userId      Int?      @map("user_id")
  name        String?
  email       String?
  phoneNumber String?   @map("phone_number")
  subject     String?
  message     String?
  isResolved  Boolean?  @map("is_resolved")
  adminReply  String?   @map("admin_reply")
  repliedAt   DateTime? @map("replied_at") @db.Timestamptz(6)
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime? @updatedAt @db.Timestamptz(6)
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([isResolved])
  @@map("contact_us")
}

model NewsletterSubscription {
  id             String    @id @default(cuid())
  email          String    @unique
  isSubscribed   Boolean   @default(true)
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?

  @@map("newsletter_subscriptions")
}

model ActivityLog {
  id           Int       @id @default(autoincrement())
  userId       Int?      @map("user_id")
  action       String?
  resourceType String?   @map("resource_type")
  resourceId   String?   @map("resource_id")
  ipAddress    String?   @map("ip_address")
  userAgent    String?   @map("user_agent")
  details      Json?
  status       String?
  errorMessage String?   @map("error_message")
  durationMs   Int?      @map("duration_ms")
  createdAt    DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime? @updatedAt @db.Timestamptz(6)
  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([resourceType])
  @@map("activity_logs")
}

model connected_accounts {
  id          String   @id @default(cuid())
  userId      Int
  provider    String
  providerId  String
  email       String
  connected   Boolean  @default(true)
  connectedAt DateTime @default(now())
  lastUsed    DateTime?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([connected])
  @@index([provider])
  @@index([userId])
}

model user_settings {
  id            String   @id @default(cuid())
  userId        Int      @unique
  notifications Json     @default("{\"sms\": true, \"email\": true, \"quietHours\": {\"enabled\": false, \"endTime\": \"08:00\", \"timezone\": \"UTC\", \"startTime\": \"22:00\"}, \"bookingUpdates\": true, \"propertyAlerts\": true, \"securityAlerts\": true, \"marketingEmails\": false, \"priceDropAlerts\": true, \"preferredChannel\": \"email\", \"pushNotifications\": false, \"systemNotifications\": true}")
  security      Json     @default("{\"dataSharing\": false, \"sessionTimeout\": 30, \"analyticsOptOut\": false, \"twoFactorMethod\": \"sms\", \"twoFactorEnabled\": false, \"maxActiveSessions\": 5, \"profileVisibility\": \"public\", \"loginNotifications\": true, \"suspiciousActivityAlerts\": true, \"passwordChangeNotifications\": true}")
  general       Json     @default("{\"currency\": \"USD\", \"language\": \"en\", \"timezone\": \"UTC\", \"dateFormat\": \"MM/DD/YYYY\", \"timeFormat\": \"12h\", \"compactMode\": false, \"marketingConsent\": false, \"accountDeactivated\": false, \"showActivityStatus\": true, \"dataProcessingConsent\": true}")
  appearance    Json     @default("{\"theme\": \"light\", \"fontSize\": \"medium\", \"colorScheme\": \"default\", \"compactMode\": false}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model user_verifications {
  id                        String    @id @default(uuid())
  userId                    Int
  emailVerified             Boolean   @default(false)
  phoneVerified             Boolean   @default(false)
  emailVerifiedAt           DateTime?
  phoneVerifiedAt           DateTime?
  lastEmailVerificationSent DateTime?
  lastPhoneVerificationSent DateTime?
  emailVerificationCode     String?
  phoneVerificationCode     String?
  emailCodeExpires          DateTime?
  phoneCodeExpires          DateTime?
  emailVerificationAttempts Int       @default(0)
  phoneVerificationAttempts Int       @default(0)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  users                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([emailVerified])
  @@index([phoneVerified])
  @@index([userId])
}